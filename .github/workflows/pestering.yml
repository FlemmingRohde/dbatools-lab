name: dbatools-lab-container-test

# Controls when the workflow will run
on:
  push:
    branches:
      - pestering
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs the docker compose up
      - name: Containers Be ready
        run: |
          mkdir /tmp/backups
          chmod 777 /tmp/backups
          cd tests\setup\
          docker-compose up -d
          docker ps -a 
        shell: pwsh

      - name: Install and cache PowerShell modules
        uses: potatoqualitee/psmodulecache@v4
        with:
          modules-to-cache: PSFramework, dbachecks, Pester:4.10.1, Pester:5.3.1

      - name: Test the connection to the containers
        run: |
          Install-Module dbatools -Confirm:$false -Force
          Import-Module dbachecks 
          $secStringPassword = ConvertTo-SecureString -String 'dbatools.IO' -AsPlainText -Force
          $sqlcred = New-Object System.Management.Automation.PSCredential ('sqladmin', $secStringPassword)
          $PSDefaultParameterValues = @{'*:SqlCredential' = $sqlcred;'*:WarningAction' = 'Stop'}
          Set-DbcConfig -Name policy.connection.authscheme -Value SQL 
          Set-DbcConfig -Name skip.connection.ping -Value $true 
          Set-DbcConfig -Name skip.connection.remoting -Value $true
          Invoke-DbcCheck -Check InstanceConnection -SqlInstance 'localhost,15592','localhost,15593'
          Remove-DbaDatabase -SqlInstance 'localhost,15592' -Database AdventureWorks2017 -Confirm:$false  
          Set-DbaDbRecoveryModel -SqlInstance 'localhost,15592' -Database pubs  -RecoveryModel Full -Confirm:$false
          Backup-DbaDatabase -SqlInstance 'localhost,15592' -Database pubs -FilePath /var/opt/mssql/backups/pubs.bak -IgnoreFileChecks
          Backup-DbaDatabase -SqlInstance 'localhost,15592' -Database pubs -Type Diff -FilePath /var/opt/mssql/backups/pubsdiff.bak -IgnoreFileChecks
          Backup-DbaDatabase -SqlInstance 'localhost,15592' -Database pubs -Type Log -FilePath /var/opt/mssql/backups/pubs.trn -IgnoreFileChecks 
          ls -l /tmp/backups
          Get-DbaFile -SqlInstance 'localhost,15592' -Path /var/opt/mssql/backups | Out-Host
        shell: pwsh

      - name: Clone the Book Repo 
        run: | 
          mkdir book
          cd book
          git clone https://oauth2:${{ secrets.GITLABTOKEN }}@git.manning.com/agileauthor/leMaire.git 

      - name: Get some code from the book and test it on the containers
        run: | 
          docker ps -a
          $wrSplat = @{
          uri     = 'https://github.com/Microsoft/sql-server-samples/releases/download/wide-world-importers-v1.0/WideWorldImporters-Full.bak'
          OutFile = '/tmp/backups/WideWorldImporters-Full.bak'
            }
          Invoke-WebRequest @wrSplat
          $wrSplat = @{
          uri     = 'https://github.com/Microsoft/sql-server-samples/releases/download/adventureworks/AdventureWorks2017.bak'
          OutFile = '/tmp/backups/AdventureWorks2017-Full.bak'
          }
          Invoke-WebRequest @wrSplat
          Remove-Module Pester -ErrorAction SilentlyContinue
          Import-Module Pester -MinimumVersion 5.3.1
          cd book
          Invoke-Pester ../tests/bookcode.container.Tests.ps1 -Output Detailed
        shell: pwsh
